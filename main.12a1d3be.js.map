{"version":3,"sources":["scripts/main.js"],"names":["window","onload","score","rows","columns","board","isGameStarted","gameField","document","querySelector","gameScore","startButton","setGame","Array","from","length","textContent","updateScore","setTwo","renderBoard","style","display","hasEmptyTile","r","c","found","Math","floor","random","innerHTML","row","createElement","cell","num","toString","className","classList","add","appendChild","checkGameOver","slide","filteredRow","filterZero","filter","newRow","i","push","addEventListener","startGame","restartGame","messageLose","e","code","slideLeft","messageGameOver","slideRight","reverse","slideUp","column","slidColumn","slideDown"],"mappings":";AAAA,aAEAA,OAAOC,OAAS,WACVC,IAAAA,EAAQ,EACNC,EAAO,EACPC,EAAU,EACZC,EAAQ,GACRC,GAAgB,EAEdC,EAAYC,SAASC,cAAc,eACnCC,EAAYF,SAASC,cAAc,eACnCE,EAAcH,SAASC,cAAc,UAsBlCG,SAAAA,IACPP,EAAQQ,MAAMC,KACZ,CAAEC,OAAQZ,GACV,WAAMU,OAAAA,MAAMC,KAAK,CAAEC,OAAQX,GAAW,WAAM,OAAA,MAG1CE,IACFK,EAAYK,YAAc,WAG5Bd,EAAQ,EACRe,IACAC,IACAA,IACAC,IAEqBX,SAASC,cAAc,kBAE/BW,MAAMC,QAAU,OAetBH,SAAAA,IACH,GAbGI,WACF,IAAA,IAAIC,EAAI,EAAGA,EAAIpB,EAAMoB,IACnB,IAAA,IAAIC,EAAI,EAAGA,EAAIpB,EAASoB,IACvBnB,GAAgB,IAAhBA,EAAMkB,GAAGC,GACJ,OAAA,EAKN,OAAA,EAIFF,GAME,IAFHG,IAAAA,GAAQ,GAEJA,GAAO,CACPF,IAAAA,EAAIG,KAAKC,MAAMD,KAAKE,SAAWzB,GAC/BqB,EAAIE,KAAKC,MAAMD,KAAKE,SAAWxB,GAEjB,IAAhBC,EAAMkB,GAAGC,KACXnB,EAAMkB,GAAGC,GAAKE,KAAKE,SAAW,GAAM,EAAI,EACxCH,GAAQ,IAKLR,SAAAA,IACPP,EAAUM,YAAcd,EAGjBiB,SAAAA,IACPZ,EAAUsB,UAAY,GAEjB,IAAA,IAAIN,EAAI,EAAGA,EAAIpB,EAAMoB,IAAK,CAGxB,IAFCO,IAAAA,EAAMtB,SAASuB,cAAc,MAE1BP,EAAI,EAAGA,EAAIpB,EAASoB,IAAK,CAC1BQ,IAAAA,EAAOxB,SAASuB,cAAc,MAC9BE,EAAM5B,EAAMkB,GAAGC,GASjBS,GAPJD,EAAKhB,YAAsB,IAARiB,EAAYA,EAAIC,WAAa,GAChDF,EAAKG,UAAY,aAEbF,EAAM,GAAKA,GAAO,MACpBD,EAAKI,UAAUC,IAAI,eAAiBJ,EAAIC,YAG9B,OAARD,EACiBzB,SAASC,cAAc,gBAE/BW,MAAMC,QAAU,QAC3Bf,GAAgB,EAGlBwB,EAAIQ,YAAYN,GAElBzB,EAAU+B,YAAYR,IAoBjBS,SAAAA,IACF,IAAA,IAAIhB,EAAI,EAAGA,EAAIpB,EAAMoB,IACnB,IAAA,IAAIC,EAAI,EAAGA,EAAIpB,EAASoB,IAAK,CAC5BnB,GAAgB,IAAhBA,EAAMkB,GAAGC,GACJ,OAAA,EAIND,GAAAA,EAAIpB,EAAO,GAAKE,EAAMkB,GAAGC,KAAOnB,EAAMkB,EAAI,GAAGC,IAC1CA,EAAIpB,EAAU,GAAKC,EAAMkB,GAAGC,KAAOnB,EAAMkB,GAAGC,EAAI,GAE7C,OAAA,EAKN,OAAA,EAGAgB,SAAAA,EAAMV,GAIR,IAHCW,IAAAA,EAxBCC,SAAWZ,GACXA,OAAAA,EAAIa,OAAO,SAAAV,GAAOA,OAAQ,IAARA,IAuBLS,CAAWZ,GACzBc,EAAS,GAENC,EAAI,EAAGA,EAAIJ,EAAY1B,OAAQ8B,IAClCJ,EAAYI,KAAOJ,EAAYI,EAAI,IACrCD,EAAOE,KAAsB,EAAjBL,EAAYI,IACxB3C,GAA0B,EAAjBuC,EAAYI,GACrBA,KAEAD,EAAOE,KAAKL,EAAYI,IAIrBD,KAAAA,EAAO7B,OAASX,GACrBwC,EAAOE,KAAK,GAGPF,OAAAA,EA9JTjC,EAAYoC,iBAAiB,QAEpBC,WACH1C,EAQG2C,WACDC,IAAAA,EAAc1C,SAASC,cAAc,iBAET,UAA9ByC,EAAY9B,MAAMC,UACpB6B,EAAY9B,MAAMC,QAAU,QAE9BT,IAbEqC,IAEA3C,GAAgB,EAChBM,OAkGJJ,SAASuC,iBAAiB,QAAS,SAACI,GACnB,cAAXA,EAAEC,KAuDCC,WACF,IAAA,IAAI9B,EAAI,EAAGA,EAAIpB,EAAMoB,IACxBlB,EAAMkB,GAAKiB,EAAMnC,EAAMkB,IAMrBgB,GAJJrB,IACAC,IACAF,IAEIsB,IAAiB,CACbe,IAAAA,EAAkB9C,SAASC,cAAc,sBAE/C6C,EAAgBlC,MAAMC,QAAU,SAjEhCgC,GACoB,eAAXF,EAAEC,KAoENG,WACF,IAAA,IAAIhC,EAAI,EAAGA,EAAIpB,EAAMoB,IACxBlB,EAAMkB,GAAKiB,EAAMnC,EAAMkB,GAAGiC,WAAWA,UAMnCjB,GAJJrB,IACAC,IACAF,IAEIsB,IAAiB,CACbW,IAAAA,EAAc1C,SAASC,cAAc,iBAE3CyC,EAAY9B,MAAMC,QAAU,SA9E5BkC,GACoB,YAAXJ,EAAEC,KAiFNK,WACF,IAAA,IAAIjC,EAAI,EAAGA,EAAIpB,EAASoB,IAAK,CAG3B,IAFCkC,IAAAA,EAAS,GAENnC,EAAI,EAAGA,EAAIpB,EAAMoB,IACxBmC,EAAOZ,KAAKzC,EAAMkB,GAAGC,IAKlB,IAFCmC,IAAAA,EAAanB,EAAMkB,GAEhBnC,EAAI,EAAGA,EAAIpB,EAAMoB,IACxBlB,EAAMkB,GAAGC,GAAKmC,EAAWpC,GAOzBgB,GAJJrB,IACAC,IACAF,IAEIsB,IAAiB,CACbW,IAAAA,EAAc1C,SAASC,cAAc,iBAE3CyC,EAAY9B,MAAMC,QAAU,SArG5BoC,GACoB,cAAXN,EAAEC,MAwGNQ,WACF,IAAA,IAAIpC,EAAI,EAAGA,EAAIpB,EAASoB,IAAK,CAG3B,IAFCkC,IAAAA,EAAS,GAENnC,EAAI,EAAGA,EAAIpB,EAAMoB,IACxBmC,EAAOZ,KAAKzC,EAAMkB,GAAGC,IAKlB,IAFCmC,IAAAA,EAAanB,EAAMkB,EAAOF,WAEvBjC,EAAI,EAAGA,EAAIpB,EAAMoB,IACxBlB,EAAMkB,GAAGC,GAAKmC,EAAWxD,EAAO,EAAIoB,GAOpCgB,GAJJrB,IACAC,IACAF,IAEIsB,IAAiB,CACbW,IAAAA,EAAc1C,SAASC,cAAc,iBAE3CyC,EAAY9B,MAAMC,QAAU,SA5H5BuC","file":"main.12a1d3be.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nwindow.onload = function() {\n  let score = 0;\n  const rows = 4;\n  const columns = 4;\n  let board = [];\n  let isGameStarted = false;\n\n  const gameField = document.querySelector('.game-field');\n  const gameScore = document.querySelector('.game-score');\n  const startButton = document.querySelector('.start');\n\n  startButton.addEventListener('click', startGame);\n\n  function startGame() {\n    if (isGameStarted) {\n      restartGame();\n    } else {\n      isGameStarted = true;\n      setGame();\n    }\n  }\n\n  function restartGame() {\n    const messageLose = document.querySelector('.message-lose');\n\n    if (messageLose.style.display === 'block') {\n      messageLose.style.display = 'none';\n    }\n    setGame();\n  }\n\n  function setGame() {\n    board = Array.from(\n      { length: rows },\n      () => Array.from({ length: columns }, () => 0),\n    );\n\n    if (isGameStarted) {\n      startButton.textContent = 'Restart';\n    }\n\n    score = 0;\n    updateScore();\n    setTwo();\n    setTwo();\n    renderBoard();\n\n    const messageStart = document.querySelector('.message-start');\n\n    messageStart.style.display = 'none';\n  }\n\n  function hasEmptyTile() {\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < columns; c++) {\n        if (board[r][c] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function setTwo() {\n    if (!hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n\n    while (!found) {\n      const r = Math.floor(Math.random() * rows);\n      const c = Math.floor(Math.random() * columns);\n\n      if (board[r][c] === 0) {\n        board[r][c] = Math.random() < 0.5 ? 2 : 4;\n        found = true;\n      }\n    }\n  }\n\n  function updateScore() {\n    gameScore.textContent = score;\n  }\n\n  function renderBoard() {\n    gameField.innerHTML = '';\n\n    for (let r = 0; r < rows; r++) {\n      const row = document.createElement('tr');\n\n      for (let c = 0; c < columns; c++) {\n        const cell = document.createElement('td');\n        const num = board[r][c];\n\n        cell.textContent = num !== 0 ? num.toString() : '';\n        cell.className = 'field-cell';\n\n        if (num > 0 && num <= 4096) {\n          cell.classList.add('field-cell--' + num.toString());\n        }\n\n        if (num === 2048) {\n          const messageWin = document.querySelector('.message-win');\n\n          messageWin.style.display = 'block';\n          isGameStarted = false;\n        }\n\n        row.appendChild(cell);\n      }\n      gameField.appendChild(row);\n    }\n  }\n\n  document.addEventListener('keyup', (e) => {\n    if (e.code === 'ArrowLeft') {\n      slideLeft();\n    } else if (e.code === 'ArrowRight') {\n      slideRight();\n    } else if (e.code === 'ArrowUp') {\n      slideUp();\n    } else if (e.code === 'ArrowDown') {\n      slideDown();\n    }\n  });\n\n  function filterZero(row) {\n    return row.filter(num => num !== 0);\n  }\n\n  function checkGameOver() {\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < columns; c++) {\n        if (board[r][c] === 0) {\n          return false;\n        }\n\n        if (\n          (r < rows - 1 && board[r][c] === board[r + 1][c])\n          || (c < columns - 1 && board[r][c] === board[r][c + 1])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  function slide(row) {\n    const filteredRow = filterZero(row);\n    const newRow = [];\n\n    for (let i = 0; i < filteredRow.length; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        newRow.push(filteredRow[i] * 2);\n        score += filteredRow[i] * 2;\n        i++;\n      } else {\n        newRow.push(filteredRow[i]);\n      }\n    }\n\n    while (newRow.length < columns) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  function slideLeft() {\n    for (let r = 0; r < rows; r++) {\n      board[r] = slide(board[r]);\n    }\n    setTwo();\n    renderBoard();\n    updateScore();\n\n    if (checkGameOver()) {\n      const messageGameOver = document.querySelector('.message-game-over');\n\n      messageGameOver.style.display = 'block';\n    }\n  }\n\n  function slideRight() {\n    for (let r = 0; r < rows; r++) {\n      board[r] = slide(board[r].reverse()).reverse();\n    }\n    setTwo();\n    renderBoard();\n    updateScore();\n\n    if (checkGameOver()) {\n      const messageLose = document.querySelector('.message-lose');\n\n      messageLose.style.display = 'block';\n    }\n  }\n\n  function slideUp() {\n    for (let c = 0; c < columns; c++) {\n      const column = [];\n\n      for (let r = 0; r < rows; r++) {\n        column.push(board[r][c]);\n      }\n\n      const slidColumn = slide(column);\n\n      for (let r = 0; r < rows; r++) {\n        board[r][c] = slidColumn[r];\n      }\n    }\n    setTwo();\n    renderBoard();\n    updateScore();\n\n    if (checkGameOver()) {\n      const messageLose = document.querySelector('.message-lose');\n\n      messageLose.style.display = 'block';\n    }\n  }\n\n  function slideDown() {\n    for (let c = 0; c < columns; c++) {\n      const column = [];\n\n      for (let r = 0; r < rows; r++) {\n        column.push(board[r][c]);\n      }\n\n      const slidColumn = slide(column.reverse());\n\n      for (let r = 0; r < rows; r++) {\n        board[r][c] = slidColumn[rows - 1 - r];\n      }\n    }\n    setTwo();\n    renderBoard();\n    updateScore();\n\n    if (checkGameOver()) {\n      const messageLose = document.querySelector('.message-lose');\n\n      messageLose.style.display = 'block';\n    }\n  }\n};\n"]}